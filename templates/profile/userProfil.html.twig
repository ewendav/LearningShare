{% extends 'base.html.twig' %}

{% block title %}{{ userData.user_first_name }}{% endblock %}

{% block body %}
    <section class="user-profile-container">

        {# ----------------- ZONE 1 : INFOS UTILISATEUR ------------------ #}
        <div class="user-profile-header" style="display: flex; align-items: center; gap: 1.5rem; padding: 2rem; background: #F8F8F8; border-radius: 12px; margin-bottom: 2rem;">
            <img src="/{{ userData.avatar_path is not empty ? userData.avatar_path : 'uploads/avatars/avatar-default.png' }}" alt="Avatar" style="width: 100px; height: 100px; border-radius: 50%; object-fit: cover;">

            <div style="flex: 1;">
                <h2 style="margin: 0;">{{ userData.user_first_name }} {{ userData.user_last_name }}</h2>
                <p style="margin: 0.5rem 0; font-weight: bold;">{{ "Ma biographie"|trans }}</p>
                <p style="max-width: 500px;">{{ userData.biography is not empty ? userData.biography : "Pas de biographie"|trans }}</p>
            </div>

            <div class="rating-section" style="display: flex; flex-direction: column; align-items: center; gap: 1rem;">
                {# Affichage des étoiles de notation #}
                <div class="rating-container" style="text-align: center;">
                    <p style="margin: 0 0 0.5rem 0; font-size: 0.9rem; color: #666;">{{ "Moyenne des notes de l'utilisateur"|trans }}</p>
                    <div class="stars-display">
                        {% for i in 1..5 %}
                            <span class="star {% if i <= averageRating %}filled{% endif %}">★</span>
                        {% endfor %}
                        <span class="rating-text">({{ averageRating|number_format(1) }}/5)</span>
                    </div>
                </div>

                {# Bouton de notation si l'utilisateur peut noter #}
                {% if canRate %}
                    <button id="rate-user-btn" class="rate-button" onclick="showRatingModal()">{{ "Noter cet utilisateur"|trans }}</button>
                {% endif %}
            </div>
        </div>

        {# ----------------- ZONE 2 : SESSIONS ------------------ #}
        <div class="user-profile-sessions">

            {# Slider pour cours / échanges #}
            <label class="toggle-switch-container" style="margin-bottom: 2rem;">
                <input class="toggle-switch-input" type="checkbox"
                        {% if getParams.type == 'cours' %} checked {% endif %}
                       onClick="
                               window.location.href = '{{ path('app_user_profile', {'id': userData.user_id}) }}?type=' + (this.checked ? 'cours' : 'echange');
                               ">
                <span class="toggle-switch-slider">
                    <p>{{ "Mes échanges"|trans }}</p>
                    {% if app.user.id != userData.user_id %}
                        <p>{{ "Je vous apprends"|trans }}</p>
                    {% else %}
                        <p>{{ "Mes cours"|trans }}</p>
                    {% endif %}

                    <span class="slider-container">
                        <span class="slider"></span>
                    </span>
                </span>
            </label>

            {# Liste des sessions #}
            {% if sessions is empty %}
                <p>{{ "Aucune donnée disponible"|trans }}</p>
            {% else %}
                {% if getParams.type == "cours" %}
                    {% for session in sessions %}
                        {% include 'components/lessonCard.html.twig' with {
                            'avatar_path': session.host_avatar is not empty ? session.host_avatar : '',
                            'userName': session.host_first_name ~ ' ' ~ session.host_last_name,
                            'categoryLearned': categoriesIndexed[session.skill_taught_category_id] is defined ? categoriesIndexed[session.skill_taught_category_id]['name'] : '',
                            'skillLearned': session.skill_taught_name is not empty ? session.skill_taught_name : '',
                            'adresse': session.full_address is not empty ? session.full_address : '',
                            'date': session.date_session ~ ', ' ~ session.start_time,
                            'session_id': session.session_id,
                            'userId': session.host_user_id,
                            'startTime': session.start_time,
                            'endTime': session.end_time,
                            'dateDebut': session.date_session,
                            'skill_taught_category_id': session.skill_taught_category_id,
                            'categoriesIndexed': categoriesIndexed
                        } %}
                    {% endfor %}
                {% else %}
                    {% for session in sessions %}
                        {% include 'components/exchangeCard.html.twig' with {
                            'avatar_path': session.requester_avatar is not empty ? session.requester_avatar : '',
                            'userName': session.requester_first_name ~ ' ' ~ session.requester_last_name,
                            'categoryLearned': categoriesIndexed[session.skill_taught_category_id] is defined ? categoriesIndexed[session.skill_taught_category_id]['name'] : '',
                            'skillLearned': session.skill_taught_name is not empty ? session.skill_taught_name : '',
                            'categoryWanted': categoriesIndexed[session.skill_requested_category_id] is defined ? categoriesIndexed[session.skill_requested_category_id]['name'] : '',
                            'skillWanted': session.skill_requested_name is not empty ? session.skill_requested_name : '',
                            'skill_taught_category_id': session.skill_taught_category_id,
                            'skill_requested_category_id': session.skill_requested_category_id,
                            'session_id': session.session_id,
                            'userId': session.requester_user_id,
                            'startTime': session.start_time,
                            'endTime': session.end_time,
                            'dateDebut': session.date_session,
                            'categoriesIndexed': categoriesIndexed
                        } %}
                    {% endfor %}
                {% endif %}
            {% endif %}
        </div>
    </section>

    {# Modal de notation #}
    {% if canRate %}
        <div id="rating-modal" class="modal" style="display: none;">
            <div class="modal-content">
                <span class="close" onclick="closeRatingModal()">&times;</span>
                <h3>{{ "Noter"|trans }} {{ userData.user_first_name }}</h3>
                <div class="rating-stars">
                    {% for i in 1..5 %}
                        <span class="rating-star" data-rating="{{ i }}" onclick="selectRating({{ i }})">★</span>
                    {% endfor %}
                </div>
                <div class="rating-actions">
                    <button onclick="closeRatingModal()" class="cancel-btn">{{ "Annuler"|trans }}</button>
                    <button onclick="submitRating()" class="submit-btn" disabled>{{ "Valider"|trans }}</button>
                </div>
            </div>
        </div>
    {% endif %}

    <style>
        .stars-display .star {
            color: #ddd;
            font-size: 1.5rem;
            margin-right: 0.2rem;
        }
        
        .stars-display .star.filled {
            color: #ffc107;
        }
        
        .rating-text {
            margin-left: 0.5rem;
            font-weight: bold;
            color: #666;
        }
        
        .rate-button {
            padding: 0.5rem 1rem;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
        }
        
        .rate-button:hover {
            background-color: #0056b3;
        }
        
        .modal {
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 2rem;
            border-radius: 12px;
            width: 400px;
            text-align: center;
        }
        
        .close {
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close:hover {
            color: #000;
        }
        
        .rating-stars {
            margin: 2rem 0;
        }
        
        .rating-star {
            font-size: 2rem;
            color: #ddd;
            cursor: pointer;
            margin: 0 0.2rem;
            transition: color 0.2s;
        }
        
        .rating-star:hover,
        .rating-star.selected {
            color: #ffc107;
        }
        
        .rating-actions {
            display: flex;
            gap: 1rem;
            justify-content: center;
        }
        
        .cancel-btn,
        .submit-btn {
            padding: 0.7rem 1.5rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 1rem;
        }
        
        .cancel-btn {
            background-color: #6c757d;
            color: white;
        }
        
        .submit-btn {
            background-color: #28a745;
            color: white;
        }
        
        .submit-btn:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
    </style>

    <script>
        let selectedRating = 0;

        function showRatingModal() {
            document.getElementById('rating-modal').style.display = 'block';
        }

        function closeRatingModal() {
            document.getElementById('rating-modal').style.display = 'none';
            selectedRating = 0;
            updateStars();
            document.querySelector('.submit-btn').disabled = true;
        }

        function selectRating(rating) {
            selectedRating = rating;
            updateStars();
            document.querySelector('.submit-btn').disabled = false;
        }

        function updateStars() {
            const stars = document.querySelectorAll('.rating-star');
            stars.forEach((star, index) => {
                if (index < selectedRating) {
                    star.classList.add('selected');
                } else {
                    star.classList.remove('selected');
                }
            });
        }

        function submitRating() {
            if (selectedRating === 0) return;

            fetch('{{ path('app_rate_user', {'userId': userData.user_id}) }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'rating=' + selectedRating
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(data.message);
                    closeRatingModal();
                    
                    // Mettre à jour l'affichage des étoiles
                    const starsDisplay = document.querySelector('.stars-display');
                    const stars = starsDisplay.querySelectorAll('.star');
                    const ratingText = starsDisplay.querySelector('.rating-text');
                    
                    stars.forEach((star, index) => {
                        if (index < Math.round(data.newAverageRating)) {
                            star.classList.add('filled');
                        } else {
                            star.classList.remove('filled');
                        }
                    });
                    
                    ratingText.textContent = '(' + data.newAverageRating + '/5)';
                    
                    // Cacher le bouton de notation
                    document.getElementById('rate-user-btn').style.display = 'none';
                } else {
                    alert(data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Une erreur est survenue');
            });
        }
    </script>
{% endblock %}
